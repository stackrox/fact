name: Run integration tests
on:
  workflow_call:
    inputs:
      version:
        description: The version of fact to be tested (commit SHA or tag)
        default: ${{ github.head_ref || github.ref_name }}
        type: string
      registry:
        description: Container registry holding the image to test
        default: quay.io/stackrox-io/fact
        type: string
      tag:
        description: The container image tag to test
        type: string
      job-tag:
        description: Additional tag to prevent collision on GCP VM naming
        type: string
        default: ''

      # this is temporary, will be removed once Konflux builds have been
      # modified to support Arm
      vm_list:
        description: JSON list of VMs to test on
        default: '["fedora-coreos","fcarm"]'
        type: string

jobs:
  integration-tests:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        vm: "${{ fromJSON(inputs.vm_list) }}"

    steps:
    - uses: actions/checkout@v4
      with:
        path: fact
    - uses: actions/checkout@v4
      with:
        repository: stackrox/collector
        path: collector
        ref: master
    - uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Authenticate with GCP
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GOOGLE_CREDENTIALS_COLLECTOR_CI_VM_SVC_ACCT }}'

    - name: Setup GCP
      uses: 'google-github-actions/setup-gcloud@v2'

    - uses: ./collector/.github/actions/setup-vm-creds
      with:
        gcp-ssh-key: ${{ secrets.GCP_SSH_KEY }}
        gcp-ssh-key-pub: ${{ secrets.GCP_SSH_KEY_PUB }}
        s390x-ssh-key: ${{ secrets.IBM_CLOUD_S390X_SSH_PRIVATE_KEY }}
        ppc64le-ssh-key: ${{ secrets.IBM_CLOUD_POWER_SSH_PRIVATE_KEY }}
        ppc64le-ssh-key-pub: ${{ secrets.IBM_CLOUD_POWER_SSH_PUBLIC_KEY }}
        s390x-key: ${{ secrets.IBM_CLOUD_S390x_API_KEY }}
        ppc64le-key: ${{ secrets.IBM_CLOUD_POWER_API_KEY }}
        redhat-username: ${{ secrets.REDHAT_USERNAME }}
        redhat-password: ${{ secrets.REDHAT_PASSWORD }}
        vm-type: ${{ matrix.vm }}
        job-tag: ${{ inputs.job-tag }}
        workspace: ${{ github.workspace }}/collector

    - name: Create vars.yml
      env:
        FACT_VERSION: ${{ inputs.version }}
        FACT_REGISTRY: ${{ inputs.registry }}
        FACT_TAG: ${{ inputs.tag }}
      run: |
        FACT_IMAGE_NAME="$(make -sC "${GITHUB_WORKSPACE}/fact" image-name)"
        cat << EOF > vars.yml
        ---
        job_id: ${JOB_ID}
        fact:
          image: ${FACT_IMAGE_NAME}
          version: ${FACT_VERSION}
        quay:
          username: ${{ secrets.QUAY_RHACS_ENG_RO_USERNAME }}
          password: ${{ secrets.QUAY_RHACS_ENG_RO_PASSWORD }}
        EOF

    - name: Create Test VMs
      run: |
        make -C "./collector/ansible" create-ci-vms

    - name: Run the tests
      run: |
        ansible-playbook \
          -i "${GITHUB_WORKSPACE}/collector/ansible/ci" \
          -e @vars.yml \
          "${GITHUB_WORKSPACE}/fact/ansible/run-tests.yml"

    - name: Teardown VMs
      if: always()
      run: |
        make -C "./collector/ansible" destroy-vms

    - name: Unarchive logs
      if: always()
      run: |
        cd "${GITHUB_WORKSPACE}/fact/tests"
        if [[ -f "logs.tar.gz" ]]; then
          tar xzf "logs.tar.gz"
          rm -f "logs.tar.gz"
        fi

    - name: Test summary
      uses: test-summary/action@v2
      if: always()
      with:
        paths: ${{ github.workspace }}/fact/tests/results.xml

    - name: Store artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.vm }}-test-logs
        path: |
          ${{ github.workspace }}/fact/tests/logs
          ${{ github.workspace }}/fact/tests/results.xml
        if-no-files-found: ignore
